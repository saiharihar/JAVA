import java.util.*;

class Main {
    static class node {
        int data;
        node right;
        node left;

        node(int d) {
            data = d;
            right = null;
            left = null;
        }
    }

    static node build(node root, int a) {
        if (root == null) {
            return new node(a);
        }
        if (a < root.data) {
            root.left = build(root.left, a);
        }
        if (a > root.data) {
            root.right = build(root.right, a);
        }
        return root;
    }

    static node remove(node root, int a) {
        if (root == null) {
            return null;
        } else if (a < root.data) {
            root.left = remove(root.left, a);
        } else if (a > root.data) {
            root.right = remove(root.right, a);
        } else {
            if (root.left == null) {
                return root.right; // Return right child if left is null
            } else if (root.right == null) {
                return root.left; // Return left child if right is null
            } else {
                // Node has both left and right children
                node left = root.left;
                node rightmostLeft = left;
                while (rightmostLeft.right != null) {
                    rightmostLeft = rightmostLeft.right;
                }
                rightmostLeft.right = root.right;
                return left; // Return the updated root of the subtree
            }
        }
        return root; // Return root of the subtree
    }

    static void printInorder(node root) {
        if (root == null) {
            return;
        }
        printInorder(root.left);
        System.out.print(root.data + " ");
        printInorder(root.right);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        node root = null;

        System.out.println("Enter the number of elements in the BST:");
        int n = scanner.nextInt();

        int[] a = new int[n];
        System.out.println("Enter the elements in the BST:");
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        for (int i = 0; i < n; i++) {
            root = build(root, a[i]);
        }

        System.out.println("Enter the element to be removed:");
        int k = scanner.nextInt();
        root = remove(root, k);

        System.out.println("Inorder traversal after removal:");
        printInorder(root);

        scanner.close();
    }
}
